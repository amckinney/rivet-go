// This file was auto-generated by Fern from our API Definition.

package chat

import (
	fmt "fmt"
	time "time"

	uuid "github.com/gofrs/uuid/v5"
	rivetgo "github.com/rivet-gg/rivet-go"
	group "github.com/rivet-gg/rivet-go/common/group"
	identity "github.com/rivet-gg/rivet-go/common/identity"
)

type GetThreadHistoryRequest struct {
	// RFC3339 timestamp.
	Ts *time.Time `json:"-"`
	// How many messages to collect in each direction. If querying `rivet.api.chat.common#QueryDirection$before_and_after`, `rivet.api.chat.common#QueryDirection$chat_messages` will be `count * 2`.
	Count float64 `json:"-"`
	// Represents which direction to query messages from relative to the given timestamp.
	QueryDirection *QueryDirection `json:"-"`
}

type IdentityTypingStatus struct {
	Identity *identity.Handle `json:"identity,omitempty"`
	Status   *TypingStatus    `json:"status,omitempty"`
}

type Message struct {
	ChatMessageId uuid.UUID    `json:"chat_message_id"`
	ThreadId      uuid.UUID    `json:"thread_id"`
	SendTs        time.Time    `json:"send_ts"`
	Body          *MessageBody `json:"body,omitempty"`
}

// Represents types of chat message bodies.
type MessageBody struct {
	Text            *MessageBodyText            `json:"text,omitempty"`
	ChatCreate      *MessageBodyChatCreate      `json:"chat_create,omitempty"`
	Deleted         *MessageBodyDeleted         `json:"deleted,omitempty"`
	IdentityFollow  *MessageBodyIdentityFollow  `json:"identity_follow,omitempty"`
	GroupJoin       *MessageBodyGroupJoin       `json:"group_join,omitempty"`
	GroupLeave      *MessageBodyGroupLeave      `json:"group_leave,omitempty"`
	GroupMemberKick *MessageBodyGroupMemberKick `json:"group_member_kick,omitempty"`
}

type MessageBodyChatCreate struct {
}

type MessageBodyDeleted struct {
	Sender *identity.Handle `json:"sender,omitempty"`
}

type MessageBodyGroupJoin struct {
	Identity *identity.Handle `json:"identity,omitempty"`
}

type MessageBodyGroupLeave struct {
	Identity *identity.Handle `json:"identity,omitempty"`
}

type MessageBodyGroupMemberKick struct {
	Identity *identity.Handle `json:"identity,omitempty"`
}

type MessageBodyIdentityFollow struct {
}

type MessageBodyText struct {
	Sender *identity.Handle `json:"sender,omitempty"`
	Body   string           `json:"body"`
}

type QueryDirection string

const (
	// Query messages send before given timestamp.
	QueryDirectionBefore QueryDirection = "before"
	// Query messages after given timestamp.
	QueryDirectionAfter QueryDirection = "after"
	// Query messages before and after the given timestamp. This will return at most `count * 2` messages.
	QueryDirectionBeforeAndAfter QueryDirection = "before_and_after"
)

func NewQueryDirectionFromString(s string) (QueryDirection, error) {
	switch s {
	case "before":
		return QueryDirectionBefore, nil
	case "after":
		return QueryDirectionAfter, nil
	case "before_and_after":
		return QueryDirectionBeforeAndAfter, nil
	}
	var t QueryDirection
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (q QueryDirection) Ptr() *QueryDirection {
	return &q
}

// Data to send in a chat message.
type SendMessageBody struct {
	Text *SendMessageBodyText `json:"text,omitempty"`
}

// The text in the text message.
type SendMessageBodyText struct {
	Body string `json:"body"`
}

// Topic to send a chat message to.
type SendTopic struct {
	ThreadId   *uuid.UUID `json:"thread_id,omitempty"`
	GroupId    *uuid.UUID `json:"group_id,omitempty"`
	IdentityId *uuid.UUID `json:"identity_id,omitempty"`
}

// Represents a topic of the given chat thread without the associated handles
// for the topic.
type SimpleTopic struct {
	Group  *SimpleTopicGroup  `json:"group,omitempty"`
	Direct *SimpleTopicDirect `json:"direct,omitempty"`
}

type SimpleTopicDirect struct {
	IdentityA uuid.UUID `json:"identity_a"`
	IdentityB uuid.UUID `json:"identity_b"`
}

type SimpleTopicGroup struct {
	Group uuid.UUID `json:"group"`
}

// A chat thread
type Thread struct {
	ThreadId    uuid.UUID            `json:"thread_id"`
	CreateTs    time.Time            `json:"create_ts"`
	Topic       *Topic               `json:"topic,omitempty"`
	TailMessage *Message             `json:"tail_message,omitempty"`
	LastReadTs  time.Time            `json:"last_read_ts"`
	UnreadCount int64                `json:"unread_count"`
	External    *ThreadExternalLinks `json:"external,omitempty"`
}

type ThreadExternalLinks struct {
	Chat string `json:"chat"`
}

// Represents the topic of the given chat thread.
type Topic struct {
	Group  *TopicGroup  `json:"group,omitempty"`
	Direct *TopicDirect `json:"direct,omitempty"`
}

type TopicDirect struct {
	IdentityA *identity.Handle `json:"identity_a,omitempty"`
	IdentityB *identity.Handle `json:"identity_b,omitempty"`
}

type TopicGroup struct {
	Group *group.Handle `json:"group,omitempty"`
}

type TypingStatus struct {
	// Not typing
	Idle *rivetgo.EmptyObject `json:"idle,omitempty"`
	// Typing
	Typing *rivetgo.EmptyObject `json:"typing,omitempty"`
}

type WatchThreadRequest struct {
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}
